var search_data = {"index":{"searchIndex":["logarithmustest","mypi","object","person","unittestlogarithmus","unittestpi","<=>()","==()","eql?()","gesendete_lesen()","get_n_digit_of_pi()","get_n_digit_of_pi_dual()","hash()","initialize()","lesen()","ln()","ln_iterativ_for()","ln_iterativ_reduce()","ln_rekursiv()","my_pi()","new()","praezisionstest()","setup()","setup()","setup()","spaceship_alphabetisch()","test_nan()","test_compare()","test_compare_with_other()","test_float_values()","test_infinity()","test_negative_float()","test_negative_integer()","test_negative_values()","test_positive()","test_positive_big_bigdecimal()","test_positive_bigdecimal()","test_positive_float()","test_positive_float_out_of_range()","test_positive_integer()","test_postive_dual()","test_sorted_set()","test_string()","test_string_values()","to_s()","zustand()"],"longSearchIndex":["logarithmustest","mypi","object","person","unittestlogarithmus","unittestpi","person#<=>()","person#==()","person#eql?()","person#gesendete_lesen()","mypi#get_n_digit_of_pi()","mypi#get_n_digit_of_pi_dual()","person#hash()","mypi#initialize()","person#lesen()","object#ln()","object#ln_iterativ_for()","object#ln_iterativ_reduce()","object#ln_rekursiv()","mypi#my_pi()","person::new()","mypi#praezisionstest()","logarithmustest#setup()","unittestlogarithmus#setup()","unittestpi#setup()","person#spaceship_alphabetisch()","unittestlogarithmus#test_nan()","logarithmustest#test_compare()","logarithmustest#test_compare_with_other()","unittestpi#test_float_values()","unittestlogarithmus#test_infinity()","unittestlogarithmus#test_negative_float()","unittestlogarithmus#test_negative_integer()","unittestpi#test_negative_values()","unittestpi#test_positive()","unittestlogarithmus#test_positive_big_bigdecimal()","unittestlogarithmus#test_positive_bigdecimal()","unittestlogarithmus#test_positive_float()","unittestlogarithmus#test_positive_float_out_of_range()","unittestlogarithmus#test_positive_integer()","unittestpi#test_postive_dual()","logarithmustest#test_sorted_set()","unittestlogarithmus#test_string()","unittestpi#test_string_values()","person#to_s()","person#zustand()"],"info":[["LogarithmusTest","","LogarithmusTest.html","","<p>Author &mdash; Lucas Anders\n\n"],["MyPi","","MyPi.html","","<p>Klasse zur Berechnung von PI\n<p>Bei 11 Iterationen der Formel wird die gleiche Genauigkeit wie bei Math::PI\n…\n"],["Object","","Object.html","",""],["Person","","Person.html","","<p>beschreibt eine Klasse Person, die Briefe von anderen Personen erhalten\nkann und Briefe an andere Personen …\n"],["UnittestLogarithmus","","UnittestLogarithmus.html","",""],["UnittestPi","","UnittestPi.html","",""],["<=>","Person","Person.html#method-i-3C-3D-3E","(other,variante = 1)","<p>vergleicht beide Objekte hinsichtlich der natürlichen Ordnung der Attribute\nName, Strasse, PLZ und Ort …\n"],["==","Person","Person.html#method-i-3D-3D","(other)",""],["eql?","Person","Person.html#method-i-eql-3F","(other)",""],["gesendete_lesen","Person","Person.html#method-i-gesendete_lesen","()","<p>gibt alle Briefe im Postausgang auf der Konsole aus\n"],["get_n_digit_of_pi","MyPi","MyPi.html#method-i-get_n_digit_of_pi","(n, system = 10)","<p>Aufgabe 1.2.2 - n-te Nachkommastelle von pi\n<p>Atrributes\n<p><code>n</code> Integer: Wievielte Nachkommastelle\n"],["get_n_digit_of_pi_dual","MyPi","MyPi.html#method-i-get_n_digit_of_pi_dual","(n)","<p>Aufgabe 1.2.3 - n-te Nachkommastelle von Pi in Binaerdarstellung\n"],["hash","Person","Person.html#method-i-hash","()",""],["initialize","MyPi","MyPi.html#method-i-initialize","()",""],["lesen","Person","Person.html#method-i-lesen","()","<p>gibt alle Briefe im Posteingang auf der Konsole aus\n"],["ln","Object","Object.html#method-i-ln","(a, implementierung = 1)","<p>Reihenentwicklung des natuerlichen Logarithmus\n<p>Implementiert in 3 verschiedenen Varianten\n<p>For-Schleife …\n"],["ln_iterativ_for","Object","Object.html#method-i-ln_iterativ_for","(x, genauigkeit)","<p>Iterativer Ansatz mit klassischer for-schleife\n"],["ln_iterativ_reduce","Object","Object.html#method-i-ln_iterativ_reduce","(x, genauigkeit)","<p>Iterativer Ansatz mit reduce\n<p>Fuer dieses Rechenbeispiel der langsamste Weg\n"],["ln_rekursiv","Object","Object.html#method-i-ln_rekursiv","(x, genauigkeit)","<p>Rekursiver Ansatz.\n<p>Fuer dieses Rechenbeispiel der schnellste Weg\n"],["my_pi","MyPi","MyPi.html#method-i-my_pi","(n = @genauigkeit)","<p>Aufgabe 1.2.1 - Implementierung der Bailey-Borwein-Plouffe-Formel\n"],["new","Person","Person.html#method-c-new","(name, strasse, plz, ort)",""],["praezisionstest","MyPi","MyPi.html#method-i-praezisionstest","()","<p>Aufgabe 1.2.1 - Wie schnell kommen wir auf den gleichen wert wie Math::PI?\n"],["setup","LogarithmusTest","LogarithmusTest.html#method-i-setup","()",""],["setup","UnittestLogarithmus","UnittestLogarithmus.html#method-i-setup","()","<p>Stellt Testwerte bereit\n"],["setup","UnittestPi","UnittestPi.html#method-i-setup","()","<p>Bereitet die Pi-Klasse vor\n"],["spaceship_alphabetisch","Person","Person.html#method-i-spaceship_alphabetisch","(other)","<p>definiert den Spaceship-Operator nach alphabetischer Ordnung\n"],["test_NaN","UnittestLogarithmus","UnittestLogarithmus.html#method-i-test_NaN","()","<p>Testet, ob bei der Uebergabe von NaN ein korrekter Fehler erzeugt wird\n"],["test_compare","LogarithmusTest","LogarithmusTest.html#method-i-test_compare","()",""],["test_compare_with_other","LogarithmusTest","LogarithmusTest.html#method-i-test_compare_with_other","()",""],["test_float_values","UnittestPi","UnittestPi.html#method-i-test_float_values","()","<p>Testet, ob fehlerhafte Nachkommastellen einen Fehler ausgeben\n"],["test_infinity","UnittestLogarithmus","UnittestLogarithmus.html#method-i-test_infinity","()","<p>Testet, ob bei der Uebergabe von Infinity ein korrekter Fehler erzeugt wird\n"],["test_negative_float","UnittestLogarithmus","UnittestLogarithmus.html#method-i-test_negative_float","()","<p>Testet, ob bei negative Floatzahlen ein korrekter Fehler erzeugt wird\n"],["test_negative_integer","UnittestLogarithmus","UnittestLogarithmus.html#method-i-test_negative_integer","()","<p>testet, ob bei uebergebenem fehlerhaften Integer ein korrekter Fehler\nerzeugt wird\n"],["test_negative_values","UnittestPi","UnittestPi.html#method-i-test_negative_values","()","<p>Testet, ob negative Nachkommastelle einen Fehler ausgibt\n"],["test_positive","UnittestPi","UnittestPi.html#method-i-test_positive","()","<p>Testet Werte innerhalb des erlaubten Bereiches\n"],["test_positive_big_bigdecimal","UnittestLogarithmus","UnittestLogarithmus.html#method-i-test_positive_big_bigdecimal","()","<p>Testet, ob grosse (Lange) Werte von BigDecimal innerhalb des erlaubte\nBereiches einen korrekten Wert …\n"],["test_positive_bigdecimal","UnittestLogarithmus","UnittestLogarithmus.html#method-i-test_positive_bigdecimal","()","<p>Testet, ob BigDecimal innerhalb des erlaubte Bereiches einen korrekten Wert\nliefern\n"],["test_positive_float","UnittestLogarithmus","UnittestLogarithmus.html#method-i-test_positive_float","()","<p>Testet positive Floatzahlen innerhalb des erlaubten Bereiches\n"],["test_positive_float_out_of_range","UnittestLogarithmus","UnittestLogarithmus.html#method-i-test_positive_float_out_of_range","()","<p>Testet, ob bei positive Floatzahlen ausserhalb des erlaubten Bereiches ein\nkorrekter Fehler erzeugt wird …\n"],["test_positive_integer","UnittestLogarithmus","UnittestLogarithmus.html#method-i-test_positive_integer","()","<p>testet, ob bei uebergebene Integer innerhalb des erlaubten Bereiches\ntrotzdem einen korrekten Wert geliefert …\n"],["test_postive_dual","UnittestPi","UnittestPi.html#method-i-test_postive_dual","()","<p>Testet auf Nachkommastellen der Bineardarstellung von PI\n"],["test_sorted_set","LogarithmusTest","LogarithmusTest.html#method-i-test_sorted_set","()",""],["test_string","UnittestLogarithmus","UnittestLogarithmus.html#method-i-test_string","()","<p>Testet, ob bei uebergebenem String ein korrekter Fehler erzeugt wird\n"],["test_string_values","UnittestPi","UnittestPi.html#method-i-test_string_values","()","<p>Testet, ob Strings einen Fehler ausgibt\n"],["to_s","Person","Person.html#method-i-to_s","()","<p>gibt die Person in einem lesbaren String zurück\n"],["zustand","Person","Person.html#method-i-zustand","()","<p>gibt die aktuellen Werte der Attribute in einem Array zurück wird für die\nVergleichsmethoden benötigt …\n"]]}}